{"version":3,"sources":["pathfinder/Node/Node.jsx","algorithms/dijkstra.js","algorithms/aStar.js","pathfinder/pathfinder.jsx","algorithms/bfs.js","algorithms/dfs.js","App.js","reportWebVitals.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","AStar","sortByDistance","distanceToFinishNode","PathfindingVisualizer","getInitialGrid","rowCount","state","ROW_COUNT","colCount","COLUMN_COUNT","initialGrid","currentRow","createNode","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","Math","abs","isNode","mouseIsPressed","MOBILE_ROW_COUNT","MOBILE_COLUMN_COUNT","isRunning","isStartNode","isFinishNode","isWallNode","currRow","currCol","isDesktopView","handleMouseDown","bind","handleMouseLeave","toggleIsRunning","Grid","setState","clearGrid","clearWalls","alert","isGridClear","document","getElementById","newGrid","getNewGridWithWallToggled","nodeClassName","slice","algo","nextNodesStack","currentNode","nextNode","bfs","pop","dfs","nodesInShortestPathOrder","unshift","getNodesInShortestPathOrder","animate","i","setTimeout","animateShortestPath","onMouseLeave","map","rowIdx","nodeIdx","handleMouseEnter","handleMouseUp","type","onClick","visualize","toggleView","newNode","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.307d6cfd.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n    } = this.props;//this receives that destructured values from map as props\r\n    \r\n    \r\n    const extraClassName = isFinish\r\n      ? 'node-finish'\r\n      : isStart\r\n      ? 'node-start'\r\n      : isWall\r\n      ? 'node-wall'\r\n      : '';\r\n\r\n    return (\r\n      <td\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}></td>\r\n    );\r\n  }\r\n}","// Returns all nodes in the order in which they were visited.\r\n// Make nodes point back to their previous node so that we can compute the shortest path\r\n// by backtracking from the finish node.\r\n\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n    const visitedNodesInOrder = [];\r\n    startNode.distance = 0;\r\n    const unvisitedNodes = getAllNodes(grid); \r\n  \r\n    while (unvisitedNodes.length) {\r\n      sortNodesByDistance(unvisitedNodes);\r\n      const closestNode = unvisitedNodes.shift();// closest node holds an object of node type\r\n      // If we encounter a wall, we skip it.\r\n      if (!closestNode.isWall) {\r\n        // If the closest node is at a distance of infinity,\r\n        // we must be trapped and should stop.\r\n        if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n        closestNode.isVisited = true;\r\n        visitedNodesInOrder.push(closestNode);\r\n        if (closestNode === finishNode) return visitedNodesInOrder;\r\n        updateUnvisitedNeighbors(closestNode, grid);\r\n      }\r\n    }\r\n  }\r\n  \r\n  function getAllNodes(grid) {\r\n    const nodes = [];\r\n    for (const row of grid) {\r\n      for (const node of row) {\r\n        nodes.push(node);\r\n      }\r\n    }\r\n    return nodes;\r\n  }\r\n  \r\n  function sortNodesByDistance(unvisitedNodes) {\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n  }\r\n  \r\n  function updateUnvisitedNeighbors(node, grid) {\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n    for (const neighbor of unvisitedNeighbors) {\r\n      neighbor.distance = node.distance + 1;\r\n      neighbor.previousNode = node;//keeping track of prev node\r\n    }\r\n  }\r\n  \r\n  function getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const {col, row} = node;//destructuring of node\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);//only return unvisited neighbours\r\n  }","// Returns all nodes in the order in which they were visited.\r\n// Make nodes point back to their previous node so that we can compute the shortest path\r\n// by backtracking from the finish node.\r\n\r\nexport function AStar(grid, startNode, finishNode) {\r\n    const visitedNodesInOrder = [];\r\n    startNode.distance = 0;\r\n    const unvisitedNodes = getAllNodes(grid); // Q: different from using grid or slice of grid???\r\n  \r\n    while (unvisitedNodes.length) {\r\n      sortByDistance(unvisitedNodes);\r\n      const closestNode = unvisitedNodes.shift();\r\n      // If we encounter a wall, we skip it.\r\n      if (!closestNode.isWall) {\r\n        // If the closest node is at a distance of infinity,\r\n        // we must be trapped and should stop.\r\n        if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n        closestNode.isVisited = true;\r\n        visitedNodesInOrder.push(closestNode);\r\n        if (closestNode === finishNode) return visitedNodesInOrder;\r\n        updateUnvisitedNeighbors(closestNode, grid);\r\n      }\r\n    }\r\n  }\r\n  \r\n  function getAllNodes(grid) {\r\n    const nodes = [];\r\n    for (const row of grid) {\r\n      for (const node of row) {\r\n        nodes.push(node);\r\n      }\r\n    }\r\n    return nodes;\r\n  }\r\n  \r\n  function sortByDistance(unvisitedNodes) {\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n  }\r\n  \r\n  function updateUnvisitedNeighbors(node, grid) {\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n    for (const neighbor of unvisitedNeighbors) {\r\n      neighbor.distance = node.distance + 1 + neighbor.distanceToFinishNode;\r\n      neighbor.previousNode = node;\r\n    }\r\n  }\r\n  \r\n  function getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const {col, row} = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n  }\r\n  ","import React, {Component} from 'react';\r\nimport Node from './Node/Node';\r\nimport {dijkstra} from '../algorithms/dijkstra';\r\nimport {AStar} from '../algorithms/aStar';\r\nimport {dfs} from '../algorithms/dfs';\r\nimport {bfs} from '../algorithms/bfs';\r\n\r\nimport './pathfinder.css';\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      START_NODE_ROW: 5,\r\n      FINISH_NODE_ROW: 5,\r\n      START_NODE_COL: 5,\r\n      FINISH_NODE_COL: 15,\r\n      mouseIsPressed: false,\r\n      ROW_COUNT: 25,\r\n      COLUMN_COUNT: 35,\r\n      MOBILE_ROW_COUNT: 10,\r\n      MOBILE_COLUMN_COUNT: 20,\r\n      isRunning: false,\r\n      isStartNode: false,\r\n      isFinishNode: false,\r\n      isWallNode: false, // xxxxxxx\r\n      currRow: 0,\r\n      currCol: 0,\r\n      isDesktopView: true,\r\n    };\r\n    //console.log(\"lovely day\");\r\n    //console.log((this.state));\r\n    \r\n\r\n    this.handleMouseDown = this.handleMouseDown.bind(this);\r\n    this.handleMouseLeave = this.handleMouseLeave.bind(this);\r\n    this.toggleIsRunning = this.toggleIsRunning.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const Grid = this.getInitialGrid();\r\n    this.setState({grid:Grid});\r\n  }\r\n\r\n  toggleIsRunning() {\r\n    this.setState({isRunning: !this.state.isRunning});\r\n  }\r\n\r\n  toggleView() {\r\n    if (!this.state.isRunning) {\r\n      this.clearGrid();\r\n      this.clearWalls();\r\n      const isDesktopView = !this.state.isDesktopView;\r\n      let grid;\r\n      if (isDesktopView) {\r\n        grid = this.getInitialGrid(\r\n          this.state.ROW_COUNT,\r\n          this.state.COLUMN_COUNT,\r\n        );\r\n        this.setState({isDesktopView, grid});\r\n      } else {\r\n        if (\r\n          this.state.START_NODE_ROW > this.state.MOBILE_ROW_COUNT ||\r\n          this.state.FINISH_NODE_ROW > this.state.MOBILE_ROW_COUNT ||\r\n          this.state.START_NODE_COL > this.state.MOBILE_COLUMN_COUNT ||\r\n          this.state.FINISH_NODE_COL > this.state.MOBILE_COLUMN_COUNT\r\n        ) {\r\n          alert('Start & Finish Nodes Must Be within 10 Rows x 20 Columns');\r\n        } else {\r\n          grid = this.getInitialGrid(\r\n            this.state.MOBILE_ROW_COUNT,\r\n            this.state.MOBILE_COLUMN_COUNT,\r\n          );\r\n          this.setState({isDesktopView, grid});\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /******************** Set up the initial grid ********************/\r\n  getInitialGrid = (\r\n    rowCount = this.state.ROW_COUNT,\r\n    colCount = this.state.COLUMN_COUNT,\r\n  ) => {\r\n    const initialGrid = [];\r\n    for (let row = 0; row < rowCount; row++) {\r\n      const currentRow = [];\r\n      for (let col = 0; col < colCount; col++) {\r\n        currentRow.push(this.createNode(row, col));\r\n      }\r\n      initialGrid.push(currentRow);\r\n    }\r\n    return initialGrid;\r\n  };\r\n\r\n  createNode = (row, col) => {//returns an object\r\n    return {\r\n      row,\r\n      col,\r\n      isStart:\r\n        row === this.state.START_NODE_ROW && col === this.state.START_NODE_COL,\r\n      isFinish:\r\n        row === this.state.FINISH_NODE_ROW &&\r\n        col === this.state.FINISH_NODE_COL,\r\n      distance: Infinity,\r\n      distanceToFinishNode:\r\n        Math.abs(this.state.FINISH_NODE_ROW - row) +\r\n        Math.abs(this.state.FINISH_NODE_COL - col),\r\n      isVisited: false,\r\n      isWall: false,\r\n      previousNode: null,\r\n      isNode: true,\r\n    };\r\n  };\r\n\r\n  /******************** Control mouse events ********************/\r\n  handleMouseDown(row, col) {\r\n    if (!this.state.isRunning) {\r\n      if (this.isGridClear()) {\r\n        if (\r\n          document.getElementById(`node-${row}-${col}`).className ===\r\n          'node node-start'\r\n        ) {\r\n          this.setState({\r\n            mouseIsPressed: true,\r\n            isStartNode: true,\r\n            currRow: row,\r\n            currCol: col,\r\n          });\r\n        } else if (\r\n          document.getElementById(`node-${row}-${col}`).className ===\r\n          'node node-finish'\r\n        ) {\r\n          this.setState({\r\n            mouseIsPressed: true,\r\n            isFinishNode: true,\r\n            currRow: row,\r\n            currCol: col,\r\n          });\r\n        } else {\r\n          const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n          this.setState({\r\n            grid: newGrid,\r\n            mouseIsPressed: true,\r\n            isWallNode: true,\r\n            currRow: row,\r\n            currCol: col,\r\n          });\r\n        }\r\n      } \r\n      else {\r\n        this.clearGrid();\r\n      }\r\n    }\r\n  }\r\n\r\n  isGridClear() {\r\n    for (const row of this.state.grid) {\r\n      for (const node of row) {\r\n        const nodeClassName = document.getElementById(\r\n          `node-${node.row}-${node.col}`,\r\n        ).className;\r\n        if (\r\n          nodeClassName === 'node node-visited' ||\r\n          nodeClassName === 'node node-shortest-path'\r\n        ) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.isRunning) {\r\n      if (this.state.mouseIsPressed) {\r\n        const nodeClassName = document.getElementById(`node-${row}-${col}`)\r\n          .className;\r\n        if (this.state.isStartNode) {//if the previous node is start node\r\n          if (nodeClassName !== 'node node-wall') {\r\n            const prevStartNode = this.state.grid[this.state.currRow][\r\n              this.state.currCol\r\n            ];\r\n            prevStartNode.isStart = false;\r\n            document.getElementById(\r\n              `node-${this.state.currRow}-${this.state.currCol}`,\r\n            ).className = 'node';\r\n\r\n            this.setState({currRow: row, currCol: col});\r\n            const currStartNode = this.state.grid[row][col];\r\n            currStartNode.isStart = true;\r\n            document.getElementById(`node-${row}-${col}`).className =\r\n              'node node-start';\r\n          }\r\n          this.setState({START_NODE_ROW: row, START_NODE_COL: col});\r\n        } else if (this.state.isFinishNode) {\r\n          if (nodeClassName !== 'node node-wall') {\r\n            const prevFinishNode = this.state.grid[this.state.currRow][\r\n              this.state.currCol\r\n            ];\r\n            prevFinishNode.isFinish = false;\r\n            document.getElementById(\r\n              `node-${this.state.currRow}-${this.state.currCol}`,\r\n            ).className = 'node';\r\n\r\n            this.setState({currRow: row, currCol: col});\r\n            const currFinishNode = this.state.grid[row][col];\r\n            currFinishNode.isFinish = true;\r\n            document.getElementById(`node-${row}-${col}`).className =\r\n              'node node-finish';\r\n          }\r\n          this.setState({FINISH_NODE_ROW: row, FINISH_NODE_COL: col});\r\n        } else if (this.state.isWallNode) {\r\n          const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n          this.setState({grid: newGrid});\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  handleMouseUp(row, col) {//\r\n    if (!this.state.isRunning) {\r\n      this.setState({mouseIsPressed: false});\r\n      if (this.state.isStartNode) {\r\n        const isStartNode = !this.state.isStartNode;\r\n        this.setState({isStartNode, START_NODE_ROW: row, START_NODE_COL: col});\r\n      } else if (this.state.isFinishNode) {\r\n        const isFinishNode = !this.state.isFinishNode;\r\n        this.setState({\r\n          isFinishNode,\r\n          FINISH_NODE_ROW: row,\r\n          FINISH_NODE_COL: col,\r\n        });\r\n      }\r\n      //this.getInitialGrid();\r\n    }\r\n  }\r\n\r\n  handleMouseLeave() {\r\n    if (this.state.isStartNode) {\r\n      const isStartNode = !this.state.isStartNode;\r\n      this.setState({isStartNode, mouseIsPressed: false});\r\n    } else if (this.state.isFinishNode) {\r\n      const isFinishNode = !this.state.isFinishNode;\r\n      this.setState({isFinishNode, mouseIsPressed: false});\r\n    } else if (this.state.isWallNode) {\r\n      const isWallNode = !this.state.isWallNode;\r\n      this.setState({isWallNode, mouseIsPressed: false});\r\n      //this.getInitialGrid();\r\n    }\r\n  }\r\n\r\n  /******************** Clear Board/Walls ********************/\r\n\r\n  clearGrid() {\r\n    if (!this.state.isRunning) {\r\n      const newGrid = this.state.grid.slice();\r\n      for (const row of newGrid) {\r\n        for (const node of row) {\r\n          let nodeClassName = document.getElementById(\r\n            `node-${node.row}-${node.col}`,\r\n          ).className;\r\n          if (\r\n            nodeClassName !== 'node node-start' &&\r\n            nodeClassName !== 'node node-finish' &&\r\n            nodeClassName !== 'node node-wall'\r\n          ) {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node';\r\n            node.isVisited = false;\r\n            node.distance = Infinity;\r\n            node.distanceToFinishNode =\r\n              Math.abs(this.state.FINISH_NODE_ROW - node.row) +\r\n              Math.abs(this.state.FINISH_NODE_COL - node.col);\r\n          }\r\n          if (nodeClassName === 'node node-finish') {\r\n            node.isVisited = false;\r\n            node.distance = Infinity;\r\n            node.distanceToFinishNode = 0;\r\n          }\r\n          if (nodeClassName === 'node node-start') {\r\n            node.isVisited = false;\r\n            node.distance = Infinity;\r\n            node.distanceToFinishNode =\r\n              Math.abs(this.state.FINISH_NODE_ROW - node.row) +\r\n              Math.abs(this.state.FINISH_NODE_COL - node.col);\r\n            node.isStart = true;\r\n            node.isWall = false;\r\n            node.previousNode = null;\r\n            node.isNode = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  clearWalls() {\r\n    if (!this.state.isRunning) {\r\n      const newGrid = this.state.grid.slice();\r\n      for (const row of newGrid) {\r\n        for (const node of row) {\r\n          let nodeClassName = document.getElementById(\r\n            `node-${node.row}-${node.col}`,\r\n          ).className;\r\n          if (nodeClassName === 'node node-wall') {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node';\r\n            node.isWall = false;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /******************** Create Animations ********************/\r\n  visualize(algo) {\r\n    if (!this.state.isRunning) {\r\n      this.clearGrid();\r\n      this.toggleIsRunning();\r\n      const {grid} = this.state;\r\n      const startNode =//storing startnode object\r\n        grid[this.state.START_NODE_ROW][this.state.START_NODE_COL];\r\n      const finishNode =//storing endnode object\r\n        grid[this.state.FINISH_NODE_ROW][this.state.FINISH_NODE_COL];\r\n      let visitedNodesInOrder;\r\n      switch (algo) {\r\n        case 'Dijkstra':\r\n          visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n          break;\r\n        case 'AStar':\r\n          visitedNodesInOrder = AStar(grid, startNode, finishNode);\r\n          break;\r\n        case 'BFS':\r\n          visitedNodesInOrder = bfs(grid, startNode, finishNode);\r\n          break;\r\n        case 'DFS':\r\n          visitedNodesInOrder = dfs(grid, startNode, finishNode);\r\n          break;\r\n        default:\r\n          // should never get here\r\n          break;\r\n      }\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n      nodesInShortestPathOrder.push('end');// pushing end\r\n      this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }\r\n  }\r\n\r\n  animate(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        const nodeClassName = document.getElementById(\r\n          `node-${node.row}-${node.col}`,\r\n        ).className;\r\n        if (\r\n          nodeClassName !== 'node node-start' &&\r\n          nodeClassName !== 'node node-finish'\r\n        ) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            'node node-visited';\r\n        }\r\n      }, 10 * i);\r\n    }\r\n  }\r\n\r\n  /******************** Create path from start to finish ********************/\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      if (nodesInShortestPathOrder[i] === 'end') {\r\n        setTimeout(() => {\r\n          this.toggleIsRunning();\r\n        }, i * 50);\r\n      } else {\r\n        setTimeout(() => {\r\n          const node = nodesInShortestPathOrder[i];\r\n          const nodeClassName = document.getElementById(\r\n            `node-${node.row}-${node.col}`,\r\n          ).className;\r\n          if (\r\n            nodeClassName !== 'node node-start' &&\r\n            nodeClassName !== 'node node-finish'\r\n          ) {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node node-shortest-path';\r\n          }\r\n        }, i * 40);\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    const {grid, mouseIsPressed} = this.state;\r\n    return (\r\n      <div>\r\n        <div\r\n          className=\"grid-container\"\r\n          onMouseLeave={() => this.handleMouseLeave()}>\r\n          <div className=\"grid\">\r\n            {grid.map((row, rowIdx) => {\r\n              return (\r\n                <tr key={rowIdx}>\r\n                  {row.map((node, nodeIdx) => {\r\n                    const {row, isFinish, isStart, isWall, col} =node;//destructuring the state of \"node\" \r\n                    return (\r\n                      <Node //Sending prop values (destructured from node object) for Node component, creating and returning\r\n                        key={nodeIdx}\r\n                        col={col}\r\n                        row={row}\r\n                        isFinish={isFinish}\r\n                        isStart={isStart}\r\n                        isWall={isWall}\r\n                        mouseIsPressed={mouseIsPressed}\r\n                        onMouseDown={(row, col) =>\r\n                          this.handleMouseDown(row, col)\r\n                        }\r\n                        onMouseEnter={(row, col) =>\r\n                          this.handleMouseEnter(row, col)\r\n                        } \r\n                        onMouseUp={() => this.handleMouseUp(row, col)}\r\n                        \r\n                      ></Node>\r\n                    );\r\n                  })}\r\n                </tr>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-danger\"\r\n          onClick={() => this.clearGrid()}>\r\n          Clear Grid\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-warning\"\r\n          onClick={() => this.clearWalls()}>\r\n          Clear Walls\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary\"\r\n          onClick={() => this.visualize('Dijkstra')}>\r\n          Dijkstra's\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary\"\r\n          onClick={() => this.visualize('AStar')}>\r\n          A*\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary\"\r\n          onClick={() => this.visualize('BFS')}>\r\n          Bread First Search\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary\"\r\n          onClick={() => this.visualize('DFS')}>\r\n          Depth First Search\r\n        </button>\r\n        {this.state.isDesktopView ? (\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-light\"\r\n            onClick={() => this.toggleView()}>\r\n            Mobile View\r\n          </button>\r\n        ) : (\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-dark\"\r\n            onClick={() => this.toggleView()}>\r\n            Desktop View\r\n          </button>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n/******************** Create Walls ********************/\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  // mouseDown starts to act strange if I don't make newGrid and work off of grid instead.\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  if (!node.isStart && !node.isFinish && node.isNode) {\r\n    const newNode = {\r\n      ...node,//all values of node given\r\n      isWall: !node.isWall,\r\n    };\r\n    newGrid[row][col] = newNode;\r\n  }\r\n  return newGrid;\r\n};\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called after the pathfinding methods.\r\nfunction getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","// Returns all nodes in the order in which they were visited.\r\n// Make nodes point back to their previous node so that we can compute the shortest path\r\n// by backtracking from the finish node.\r\n\r\nexport function bfs(grid, startNode, finishNode) {\r\n    const visitedNodesInOrder = [];\r\n    let nextNodesStack = [startNode];\r\n    while (nextNodesStack.length) {\r\n      const currentNode = nextNodesStack.shift();\r\n      if (currentNode === finishNode) return visitedNodesInOrder;\r\n  \r\n      if (\r\n        !currentNode.isWall &&\r\n        (currentNode.isStart || !currentNode.isVisited)\r\n      ) {\r\n        currentNode.isVisited = true;\r\n        visitedNodesInOrder.push(currentNode);\r\n        const {col, row} = currentNode;\r\n        let nextNode;\r\n        if (row > 0) {\r\n          nextNode = grid[row - 1][col];\r\n          if (!nextNode.isVisited) {\r\n            nextNode.previousNode = currentNode;\r\n            nextNodesStack.push(nextNode);\r\n          }\r\n        }\r\n        if (row < grid.length - 1) {\r\n          nextNode = grid[row + 1][col];\r\n          if (!nextNode.isVisited) {\r\n            nextNode.previousNode = currentNode;\r\n            nextNodesStack.push(nextNode);\r\n          }\r\n        }\r\n        if (col > 0) {\r\n          nextNode = grid[row][col - 1];\r\n          if (!nextNode.isVisited) {\r\n            nextNode.previousNode = currentNode;\r\n            nextNodesStack.push(nextNode);\r\n          }\r\n        }\r\n        if (col < grid[0].length - 1) {\r\n          nextNode = grid[row][col + 1];\r\n          if (!nextNode.isVisited) {\r\n            nextNode.previousNode = currentNode;\r\n            nextNodesStack.push(nextNode);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    // return visitedNodesInOrder;\r\n  }","// Returns all nodes in the order in which they were visited.\r\n// Make nodes point back to their previous node so that we can compute the shortest path\r\n// by backtracking from the finish node.\r\n\r\nexport function dfs(grid, startNode, finishNode) {\r\n    const visitedNodesInOrder = [];\r\n    const nextNodesStack = [];\r\n    nextNodesStack.push(startNode);\r\n    while (nextNodesStack.length) {\r\n      const currentNode = nextNodesStack.pop();\r\n  \r\n      if (currentNode === finishNode) {\r\n        return visitedNodesInOrder;\r\n      }\r\n  \r\n      if (\r\n        !currentNode.isWall &&\r\n        (currentNode.isStart || !currentNode.isVisited)\r\n      ) {\r\n        currentNode.isVisited = true;\r\n        visitedNodesInOrder.push(currentNode);\r\n  \r\n        const {col, row} = currentNode;\r\n        let nextNode;\r\n        if (row > 0) {\r\n          nextNode = grid[row - 1][col];\r\n          if (!nextNode.isVisited) {\r\n            nextNode.previousNode = currentNode;\r\n            nextNodesStack.push(nextNode);\r\n          }\r\n        }\r\n        if (row < grid.length - 1) {\r\n          nextNode = grid[row + 1][col];\r\n          if (!nextNode.isVisited) {\r\n            nextNode.previousNode = currentNode;\r\n            nextNodesStack.push(nextNode);\r\n          }\r\n        }\r\n        if (col > 0) {\r\n          nextNode = grid[row][col - 1];\r\n          if (!nextNode.isVisited) {\r\n            nextNode.previousNode = currentNode;\r\n            nextNodesStack.push(nextNode);\r\n          }\r\n        }\r\n        if (col < grid[0].length - 1) {\r\n          nextNode = grid[row][col + 1];\r\n          if (!nextNode.isVisited) {\r\n            nextNode.previousNode = currentNode;\r\n            nextNodesStack.push(nextNode);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }","import React from 'react';\r\nimport './App.css';\r\nimport Pathfinder from './pathfinder/pathfinder';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Pathfinder></Pathfinder>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}